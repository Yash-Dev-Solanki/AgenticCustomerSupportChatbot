from langchain_openai import ChatOpenAI
from langgraph.graph.graph import CompiledGraph
from langgraph.prebuilt import InjectedState, create_react_agent
from langchain_core.tools import tool, InjectedToolCallId
from langgraph.types import Command
from langchain_core.messages.tool import ToolMessage
from typing import (
    List,
    Annotated,
    Dict, 
    Any
)
from pydantic import SecretStr
from dotenv import load_dotenv
import os
from models.graphState import GraphState

load_dotenv()
model = ChatOpenAI(model= "gpt-4o",
                   temperature= 0,
                   api_key= SecretStr(os.getenv('OPENAI_API_KEY', ''))
        )


def create_handoff_tool(*, agent_name: str, description: str | None = None):
    name = f"transfer_to_{agent_name}"
    description = description or f"Ask {agent_name} for help"

    @tool(name, description= description) 
    def handoff_tool(
        tool_call_id: Annotated[str, InjectedToolCallId],state: Annotated[Dict[str, Any], InjectedState]
    ) -> Command:
        tool_message = ToolMessage(
            content = f"Successfully transferred to {agent_name}",
            name= name, 
            tool_call_id= tool_call_id
        )
        
        print(f"Handing Off to {name}")
        return Command(
            goto= agent_name,
            update= {"messages": state["messages"] + [tool_message]},
            graph= Command.PARENT,
        )
    
    return handoff_tool



# Handoff Tools
assign_to_update_agent = create_handoff_tool(agent_name= "update_agent", description= "Assign task to a update agent")
assign_to_query_agent = create_handoff_tool(agent_name= "query_agent", description= "Assign task to query agent")
assign_to_summary_agent = create_handoff_tool(agent_name= "summary_agent", description= "Assign task to summary agent")
assign_to_loan_statement_agent = create_handoff_tool(
    agent_name="loan_statement_agent",
    description="Get the user's loan statement (optionally filtered by date range)"
)
assign_to_loan_management_agent = create_handoff_tool(
    agent_name="loan_management_agent",
    description="Manage user loan inquiries and actions"
)

def get_supervisor_agent(members: List[str]) -> CompiledGraph:
    supervisor_agent = create_react_agent(
        model=model,
        tools=[
            assign_to_update_agent,
            assign_to_query_agent,
            assign_to_summary_agent,
            assign_to_loan_statement_agent,
            assign_to_loan_management_agent
        ],
        prompt=(
            f"""
            You are a supervisor agent responsible for orchestrating collaboration between the following specialized agents: {members}.

            Agent Capabilities:
            - Update Agent: Updates customer data in the collection.
            - Query Agent: Retrieves answers to user queries from policy documents.
            - Summary Agent: Summarizes and explains operations performed over the past week and answers related user questions.
            - Loan Statement Agent: Provides loan statements to users
            - Loan Management Agent: Handles user loan inquiries and actions like outstanding balance,tenure reduction,part payment and loan closure. 

            Guidelines:
            1. Do not perform any tasks yourself; always delegate to the appropriate agent.
            2. Assign tasks to only one agent at a time. Do not call multiple agents in parallel.
            3. After processing a user query, respond with clear and comprehensive details to the user based on the output from the most recent agent interaction.
            4. When the summary agent responds with a summary, you must repeat back the summary generated by the summary agent to the user as your final message, without any modifications or additions. Do not paraphrase or alter the summary in any way.
            5. If the information provided by the user is insufficient, politely request the necessary details before proceeding.
            6. Ensure all communication is clear, concise, and helpful.

            Your primary goal is to ensure efficient task delegation and clear communication between the user and the agents.
"""
        ),
        name="supervisor",
        state_schema=GraphState
    )
        
    return supervisor_agent